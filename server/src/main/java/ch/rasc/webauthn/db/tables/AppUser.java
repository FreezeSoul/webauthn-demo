/*
 * This file is generated by jOOQ.
 */
package ch.rasc.webauthn.db.tables;

import ch.rasc.webauthn.db.Keys;
import ch.rasc.webauthn.db.Webauthn;
import ch.rasc.webauthn.db.tables.Credentials.CredentialsPath;
import ch.rasc.webauthn.db.tables.records.AppUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AppUser extends TableImpl<AppUserRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>webauthn.app_user</code>
   */
  public static final AppUser APP_USER = new AppUser();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<AppUserRecord> getRecordType() {
    return AppUserRecord.class;
  }

  /**
   * The column <code>webauthn.app_user.id</code>.
   */
  public final TableField<AppUserRecord, Long> ID = createField(DSL.name("id"),
      SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>webauthn.app_user.username</code>.
   */
  public final TableField<AppUserRecord, String> USERNAME = createField(
      DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>webauthn.app_user.recovery_token</code>.
   */
  public final TableField<AppUserRecord, byte[]> RECOVERY_TOKEN = createField(
      DSL.name("recovery_token"),
      SQLDataType.BINARY(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BINARY)),
      this, "");

  /**
   * The column <code>webauthn.app_user.registration_start</code>.
   */
  public final TableField<AppUserRecord, LocalDateTime> REGISTRATION_START = createField(
      DSL.name("registration_start"), SQLDataType.LOCALDATETIME(0)
          .defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)),
      this, "");

  private AppUser(Name alias, Table<AppUserRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private AppUser(Name alias, Table<AppUserRecord> aliased, Field<?>[] parameters,
      Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>webauthn.app_user</code> table reference
   */
  public AppUser(String alias) {
    this(DSL.name(alias), APP_USER);
  }

  /**
   * Create an aliased <code>webauthn.app_user</code> table reference
   */
  public AppUser(Name alias) {
    this(alias, APP_USER);
  }

  /**
   * Create a <code>webauthn.app_user</code> table reference
   */
  public AppUser() {
    this(DSL.name("app_user"), null);
  }

  public <O extends Record> AppUser(Table<O> path, ForeignKey<O, AppUserRecord> childPath,
      InverseForeignKey<O, AppUserRecord> parentPath) {
    super(path, childPath, parentPath, APP_USER);
  }

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  public static class AppUserPath extends AppUser implements Path<AppUserRecord> {

    private static final long serialVersionUID = 1L;

    public <O extends Record> AppUserPath(Table<O> path,
        ForeignKey<O, AppUserRecord> childPath,
        InverseForeignKey<O, AppUserRecord> parentPath) {
      super(path, childPath, parentPath);
    }

    private AppUserPath(Name alias, Table<AppUserRecord> aliased) {
      super(alias, aliased);
    }

    @Override
    public AppUserPath as(String alias) {
      return new AppUserPath(DSL.name(alias), this);
    }

    @Override
    public AppUserPath as(Name alias) {
      return new AppUserPath(alias, this);
    }

    @Override
    public AppUserPath as(Table<?> alias) {
      return new AppUserPath(alias.getQualifiedName(), this);
    }
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Webauthn.WEBAUTHN;
  }

  @Override
  public Identity<AppUserRecord, Long> getIdentity() {
    return (Identity<AppUserRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<AppUserRecord> getPrimaryKey() {
    return Keys.KEY_APP_USER_PRIMARY;
  }

  @Override
  public List<UniqueKey<AppUserRecord>> getUniqueKeys() {
    return Arrays.asList(Keys.KEY_APP_USER_USERNAME);
  }

  private transient CredentialsPath _credentials;

  /**
   * Get the implicit to-many join path to the <code>webauthn.credentials</code> table
   */
  public CredentialsPath credentials() {
    if (_credentials == null)
      _credentials = new CredentialsPath(this, null,
          Keys.CREDENTIALS_IBFK_1.getInverseKey());

    return _credentials;
  }

  @Override
  public AppUser as(String alias) {
    return new AppUser(DSL.name(alias), this);
  }

  @Override
  public AppUser as(Name alias) {
    return new AppUser(alias, this);
  }

  @Override
  public AppUser as(Table<?> alias) {
    return new AppUser(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public AppUser rename(String name) {
    return new AppUser(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public AppUser rename(Name name) {
    return new AppUser(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public AppUser rename(Table<?> name) {
    return new AppUser(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser where(Condition condition) {
    return new AppUser(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public AppUser where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public AppUser where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public AppUser where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public AppUser where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public AppUser whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
