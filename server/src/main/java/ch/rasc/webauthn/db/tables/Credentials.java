/*
 * This file is generated by jOOQ.
 */
package ch.rasc.webauthn.db.tables;

import ch.rasc.webauthn.db.Indexes;
import ch.rasc.webauthn.db.Keys;
import ch.rasc.webauthn.db.Webauthn;
import ch.rasc.webauthn.db.tables.AppUser.AppUserPath;
import ch.rasc.webauthn.db.tables.records.CredentialsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Credentials extends TableImpl<CredentialsRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>webauthn.credentials</code>
   */
  public static final Credentials CREDENTIALS = new Credentials();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<CredentialsRecord> getRecordType() {
    return CredentialsRecord.class;
  }

  /**
   * The column <code>webauthn.credentials.id</code>.
   */
  public final TableField<CredentialsRecord, byte[]> ID = createField(DSL.name("id"),
      SQLDataType.VARBINARY(128).nullable(false), this, "");

  /**
   * The column <code>webauthn.credentials.app_user_id</code>.
   */
  public final TableField<CredentialsRecord, Long> APP_USER_ID = createField(
      DSL.name("app_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>webauthn.credentials.webauthn_user_id</code>.
   */
  public final TableField<CredentialsRecord, byte[]> WEBAUTHN_USER_ID = createField(
      DSL.name("webauthn_user_id"), SQLDataType.VARBINARY(64).nullable(false), this, "");

  /**
   * The column <code>webauthn.credentials.count</code>.
   */
  public final TableField<CredentialsRecord, Long> COUNT = createField(DSL.name("count"),
      SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>webauthn.credentials.public_key_cose</code>.
   */
  public final TableField<CredentialsRecord, byte[]> PUBLIC_KEY_COSE = createField(
      DSL.name("public_key_cose"), SQLDataType.VARBINARY(500).nullable(false), this, "");

  /**
   * The column <code>webauthn.credentials.transports</code>.
   */
  public final TableField<CredentialsRecord, String> TRANSPORTS = createField(
      DSL.name("transports"), SQLDataType.VARCHAR(255)
          .defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)),
      this, "");

  private Credentials(Name alias, Table<CredentialsRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private Credentials(Name alias, Table<CredentialsRecord> aliased, Field<?>[] parameters,
      Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>webauthn.credentials</code> table reference
   */
  public Credentials(String alias) {
    this(DSL.name(alias), CREDENTIALS);
  }

  /**
   * Create an aliased <code>webauthn.credentials</code> table reference
   */
  public Credentials(Name alias) {
    this(alias, CREDENTIALS);
  }

  /**
   * Create a <code>webauthn.credentials</code> table reference
   */
  public Credentials() {
    this(DSL.name("credentials"), null);
  }

  public <O extends Record> Credentials(Table<O> path,
      ForeignKey<O, CredentialsRecord> childPath,
      InverseForeignKey<O, CredentialsRecord> parentPath) {
    super(path, childPath, parentPath, CREDENTIALS);
  }

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  public static class CredentialsPath extends Credentials
      implements Path<CredentialsRecord> {

    private static final long serialVersionUID = 1L;

    public <O extends Record> CredentialsPath(Table<O> path,
        ForeignKey<O, CredentialsRecord> childPath,
        InverseForeignKey<O, CredentialsRecord> parentPath) {
      super(path, childPath, parentPath);
    }

    private CredentialsPath(Name alias, Table<CredentialsRecord> aliased) {
      super(alias, aliased);
    }

    @Override
    public CredentialsPath as(String alias) {
      return new CredentialsPath(DSL.name(alias), this);
    }

    @Override
    public CredentialsPath as(Name alias) {
      return new CredentialsPath(alias, this);
    }

    @Override
    public CredentialsPath as(Table<?> alias) {
      return new CredentialsPath(alias.getQualifiedName(), this);
    }
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Webauthn.WEBAUTHN;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.asList(Indexes.CREDENTIALS_APP_USER_ID);
  }

  @Override
  public UniqueKey<CredentialsRecord> getPrimaryKey() {
    return Keys.KEY_CREDENTIALS_PRIMARY;
  }

  @Override
  public List<UniqueKey<CredentialsRecord>> getUniqueKeys() {
    return Arrays.asList(Keys.KEY_CREDENTIALS_WEBAUTHN_USER_ID);
  }

  @Override
  public List<ForeignKey<CredentialsRecord, ?>> getReferences() {
    return Arrays.asList(Keys.CREDENTIALS_IBFK_1);
  }

  private transient AppUserPath _appUser;

  /**
   * Get the implicit join path to the <code>webauthn.app_user</code> table.
   */
  public AppUserPath appUser() {
    if (_appUser == null)
      _appUser = new AppUserPath(this, Keys.CREDENTIALS_IBFK_1, null);

    return _appUser;
  }

  @Override
  public Credentials as(String alias) {
    return new Credentials(DSL.name(alias), this);
  }

  @Override
  public Credentials as(Name alias) {
    return new Credentials(alias, this);
  }

  @Override
  public Credentials as(Table<?> alias) {
    return new Credentials(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Credentials rename(String name) {
    return new Credentials(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Credentials rename(Name name) {
    return new Credentials(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Credentials rename(Table<?> name) {
    return new Credentials(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials where(Condition condition) {
    return new Credentials(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Credentials where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Credentials where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Credentials where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Credentials where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Credentials whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
