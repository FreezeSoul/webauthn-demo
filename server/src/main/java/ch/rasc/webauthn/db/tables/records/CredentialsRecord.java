/*
 * This file is generated by jOOQ.
 */
package ch.rasc.webauthn.db.tables.records;

import ch.rasc.webauthn.db.tables.Credentials;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CredentialsRecord extends UpdatableRecordImpl<CredentialsRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>webauthn.credentials.id</code>.
   */
  public void setId(byte[] value) {
    set(0, value);
  }

  /**
   * Getter for <code>webauthn.credentials.id</code>.
   */
  public byte[] getId() {
    return (byte[]) get(0);
  }

  /**
   * Setter for <code>webauthn.credentials.app_user_id</code>.
   */
  public void setAppUserId(Long value) {
    set(1, value);
  }

  /**
   * Getter for <code>webauthn.credentials.app_user_id</code>.
   */
  public Long getAppUserId() {
    return (Long) get(1);
  }

  /**
   * Setter for <code>webauthn.credentials.webauthn_user_id</code>.
   */
  public void setWebauthnUserId(byte[] value) {
    set(2, value);
  }

  /**
   * Getter for <code>webauthn.credentials.webauthn_user_id</code>.
   */
  public byte[] getWebauthnUserId() {
    return (byte[]) get(2);
  }

  /**
   * Setter for <code>webauthn.credentials.count</code>.
   */
  public void setCount(Long value) {
    set(3, value);
  }

  /**
   * Getter for <code>webauthn.credentials.count</code>.
   */
  public Long getCount() {
    return (Long) get(3);
  }

  /**
   * Setter for <code>webauthn.credentials.public_key_cose</code>.
   */
  public void setPublicKeyCose(byte[] value) {
    set(4, value);
  }

  /**
   * Getter for <code>webauthn.credentials.public_key_cose</code>.
   */
  public byte[] getPublicKeyCose() {
    return (byte[]) get(4);
  }

  /**
   * Setter for <code>webauthn.credentials.transports</code>.
   */
  public void setTransports(String value) {
    set(5, value);
  }

  /**
   * Getter for <code>webauthn.credentials.transports</code>.
   */
  public String getTransports() {
    return (String) get(5);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record2<byte[], Long> key() {
    return (Record2) super.key();
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached CredentialsRecord
   */
  public CredentialsRecord() {
    super(Credentials.CREDENTIALS);
  }

  /**
   * Create a detached, initialised CredentialsRecord
   */
  public CredentialsRecord(byte[] id, Long appUserId, byte[] webauthnUserId, Long count,
      byte[] publicKeyCose, String transports) {
    super(Credentials.CREDENTIALS);

    setId(id);
    setAppUserId(appUserId);
    setWebauthnUserId(webauthnUserId);
    setCount(count);
    setPublicKeyCose(publicKeyCose);
    setTransports(transports);
    resetChangedOnNotNull();
  }
}
